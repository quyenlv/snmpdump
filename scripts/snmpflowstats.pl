#!/usr/bin/perl
#
# This script calculates statistics for SNMP flows.  The input is
# assumed a set of SNMP csv flow files, as generated by snmpdump using
# the -F option. These input files may also be gzipped (.gz or .GZ).
# Statistics are written to standard output.
#
# Example: perl snmpflowstats.pl *.csv
#
# Note: speed on MBP is 75 seconds per GB
#
# (c) 2006 Aiko Pras <pras@cs.utwente.nl>
# (c) 2006 Juergen Schoenwaelder <j.schoenwaelder@iu-bremen.de>
#
# $Id: snmpstats.pl 1974 2006-08-14 21:33:07Z schoenw $
# 

use strict;
use POSIX qw(strftime);
use File::Basename;

my %flow_bytes;
my %flow_msgs;
my %flow_start;
my %flow_end;

my $start = time();

# *********** print functions *************

sub meta_print
{
    printf("# The following table shows some overall meta information in\n" .
	   "# the form of a list of named properties.\n" .
	   "\n");
    printf("%-18s %s\n", "PROPERTY", "VALUE");

    printf("%-18s %s\n", "script-start:",
	   strftime("%FT%T+0000", gmtime($start)));
    printf("%-18s %s\n", "script-end:",
	   strftime("%FT%T+0000", gmtime(time())));
}


sub flow_print
{
    printf("\n" .
	   "# The following table shows basic statistics for the flows." .
	   "\n");
    printf("%-25s %-25s %10s %12s %s\n",
	   "START", "END", "MESSAGES", "BYTES", "FLOW");
    foreach my $flow (keys %flow_msgs) {
	printf("%-25s %-25s %10d %12d %s\n",
	       strftime("%FT%T+0000", gmtime($flow_start{$flow})),
	       strftime("%FT%T+0000", gmtime($flow_end{$flow})),
	       $flow_msgs{$flow},
	       $flow_bytes{$flow},
	       $flow);
    }
}


sub process
{
    my $file = shift;
    my $number_of_messages = 0;
    my $start_time = 0;
    my $current_time = 0;
    my $name = basename($file);
    if ($file =~ /\.g|Gz|Z$/) { 
	open(infile, "zcat $file |") or die "$0: Cannot open $file: $!\n";
    } else {
	open(infile, $file) || die "$0: Cannot open $file: $!";
    }
    while (<infile>) {
	my @a = split(/,/, $_);
	$flow_msgs{$name}++;
	$flow_bytes{$name} += $a[5];
	$flow_end{$name} = $a[0];
	if ($flow_start{$name} == 0) {
	    $flow_start{$name} = $a[0];
	}
    }
    close(infile);
}


# *********** MAIN *************

@ARGV = ('-') unless @ARGV;
while ($ARGV = shift) {
    process($ARGV)
}
meta_print();
flow_print();
exit(0);
