#!/usr/bin/perl
#
# This script calculates statistics for SNMP flows.  The input is
# assumed a set of SNMP csv flow files, as generated by snmpdump using
# the -F option. These input files may also be gzipped (.gz or .GZ).
# Statistics are written to standard output.
#
# Example: perl snmpflowstats.pl *.csv
#
# Note: speed on MBP is 75 seconds per GB
#
# (c) 2006 Aiko Pras <pras@cs.utwente.nl>
# (c) 2006 Juergen Schoenwaelder <j.schoenwaelder@iu-bremen.de>
#
# $Id: snmpstats.pl 1974 2006-08-14 21:33:07Z schoenw $
# 

use strict;
use POSIX qw(strftime);

my $infile = '';
my $number_of_messages = 0;
my $start_time = 0;
my $current_time = 0;


# *********** print functions *************
sub print_header
{
    printf("%-20s" , "START");
    printf("%-20s" , "END");
    printf("% 12s ", "MESSAGES");
    printf("%s\n" , "FLOW");
}

sub print_flowinfo 
{
    printf("%-20s" , strftime("%FT%T+0000", gmtime($start_time)));
    printf("%-20s" , strftime("%FT%T+0000", gmtime($current_time)));
    printf("%12s ", $number_of_messages); 
    printf("%s\n" , $infile); 
}


# *********** MAIN *************
print_header;
while (@ARGV) {
  $file = shift @ARGV;
  if ($file =~ /\.g|Gz|Z$/) { 
      open(infile, "zcat $file |") or die "Cannot open $file: $!\n"
  } else {
      open(infile, $file) || die "Cannot open $file: $!"
  }
  $start_time = 0;				# reset for every new input (=csv) file
  $current_time = 0;
  $number_of_messages = 0;
  while (<infile>) {
    ++$number_of_messages;
    m|^\d*\.\d*|;				# regular expression to find the time
    $current_time = $&; 		# assign matched pattern
    if ($start_time == 0) {$start_time = $current_time};
  }; # end while (<infile>)
  print_flowinfo;
  close(infile);
}; # end while (@ARGV)
exit(0);
