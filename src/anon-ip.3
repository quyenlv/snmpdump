.\"                              hey, Emacs:   -*- nroff -*-
.TH LIBANON 3 "February 12, 2006"
.\" Please update the above date whenever this man page is modified.
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins (default)
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH NAME
libanon \- anonymization library
.SH SYNOPSIS
.B #include <libanon.h>
.sp
struct _anon_ip {
    struct node *tree;
    int nodes;
    AES_KEY aes_key;	/* AES key */
    uint8_t m_key[16];	/* 128 bit secret key */
    uint8_t m_pad[16];	/* 128 bit secret pad */
};
typedef struct _anon_ip anon_ip_t;

.BI "anon_ip_t* anon_ip_new();"
.br
.BI "void anon_ip_set_key(anon_ip_t *" a ", const uint8_t *" key ");"
.br
.BI "int anon_ip_set_used(anon_ip_t *" a ", in_addr_t " ip ", int " prefixlen ");"
.br
.BI "int anon_ip_map_pref(anon_ip_t *" a ", const in_addr_t" ip ","
.br
.BI "					in_addr_t *" aip ");"
.br
.BI "int anon_ip_map_pref_lex(anon_ip_t *" a ", const in_addr_t " ip ","
.br
.BI "				in_addr_t *" aip ");"
.br
.BI "void anon_ip_delete(anon_ip_t *" a ");"

.SH DESCRIPTION
\fBlibanon\fP is an anonymization library. Functions for IPv4 address
anonymization are prefixed with
.IR anon_ip .

\fBanon_[type]_new\fP create a new anonymization object. An
anonymization object has to be created for each data type that should
be anonymized.

Afterwards, a key is set with the anon_[type]_set_key function. In
case this is omitted a random key is generated. The key is used for
the cryptographic functions for anonymizing IP addresses. Using the
same key one can obtain consisten anonymization of IP addresses (given
the same set of used addresses).


For other data types, the key is used
to seed the random number generator. This, however, does not guarantee
consisten anonymization as the openssl random number generator is
using also other entropy sources.




At the end its
resources have to be freed up with \fBanon_[type]_delete\fP.

.SH "RETURN VALUES"

.SH EXAMPLES
.br
A very good source of examples is the anon.c program.
.br
.if \w'\*(Pi'=0 .ds Pi pi
To print \*(Pi to five decimal places:
.RS
.nf
#include <math.h>
#include <stdio.h>
fprintf(stdout, "pi = %.5f\en", 4 * atan(1.0));
.fi
.RE
.PP
To print a date and time in the form `Sunday, July 3, 10:02',
where
.I weekday
and
.I month
are pointers to strings:
.RS
.nf
#include <stdio.h>
fprintf(stdout, "%s, %s %d, %.2d:%.2d\en",
	weekday, month, day, hour, min);
.fi
.RE
.PP
Many countries use the day-month-year order.

.SH BUGS
Because
.B lh_insert
does not have a return code to detect errors, we do not detect
insertion fails.
.PP
There may be some more.

.SH "SEE ALSO"
.BR anon (1),
.BR anon-ip (3),
.BR anon-int (3),
.BR anon-string (3),
.BR anon-ipv6 (3),
.BR anon-mac (3),
.BR anon-int64 (3),
.BR anon-uint64 (3),
.BR anon (3)


.SH AUTHOR
Matus Harvan <m.harvan@iu-bremen.de>
.br
Juergen Schoenwaelder <j.schoenwaelder@iu-bremen.de>.
